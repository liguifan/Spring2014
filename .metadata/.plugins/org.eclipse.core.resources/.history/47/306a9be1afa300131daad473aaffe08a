package Adaboosting;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import datastructure.Tuple;

import java.util.Random;
public class adaboosting {

	public static void main(String[] args) {
		ArrayList<ArrayList<Tuple>> alldata=new ArrayList<ArrayList<Tuple>>();
		final int len=50000;
		final int T=50;
		final double learning_rate=0.5;
		String PATH="/Users/liguifan/Desktop/data/rcv1-test.vw";
		alldata=real_file_tuples(PATH);
		final int M=alldata.size();
		//bias need to be changed and reconsidered later;
		final double bias=0.1;
		double[] dataImportance=new double[len];
		double[] alpha=new double[len];
		int[] y_real=new int[T];
		int[] y_est=new int[T];
		y_est=real_file_class(PATH);
		// data_importance may be do something new;
		double[] weight=new double[len];
		double[] s=new double[M];
		Random rand=new Random();
		
		//we need to know the y_real before run the program
		
		for(int i=0;i<=M-1;i++){
			y_real[i]=(int) tempstr.charAt(0)-48;
		}
		
		
		

		for(int i=0;i<=M-1;i++){
			dataImportance[i]=1.0/M;
		}

		for(int t=0;t<=T-1;t++){
			double error=0;
			// first get the y_estimate using the current weight;
			for(int i=0;i<=M-1;i++){
				y_est[i]=predication(weight, alldata.get(i), bias);
				int factor=(y_real[i]==y_est[i])?0:1;
				error+=dataImportance[i]*factor;
			}

			alpha[t]=0.5*Math.log((1-error)/error);
			for(int i=0;i<=M-1;i++){
				int factor=(y_real[i]==y_est[i])?0:1;
				dataImportance[i]= dataImportance[i]*Math.exp(alpha[t]*2*factor);
			}

			for(int i=0;i<=M-1;i++){
				s[i]=learning_rate_with_importance(dataImportance[i], x_list, y, weight, learning_rate);
			}
			//this step is to use the importance and get a real learning rate then to update weight;

			//update_weight using s instead of learning_rate; 
			for(int i=0;i<=2*M;i++){
				//n is the random number between 0 and M;
				int n=rand.nextInt(M);
				weight=update_theta_logistic_loss(weight,s[n],y_real[n],alldata.get(n));
			}
		}
	}
	
	
	//Test ok!
	static ArrayList<ArrayList<Tuple>> real_file_tuples(String path){
		ArrayList<ArrayList<Tuple>> alldata=new ArrayList<ArrayList<Tuple>>();
		File file=new File(path);
		BufferedReader reader=null;
		try{
			reader=new BufferedReader(new FileReader(file));
			String tempstr=null;

			while((tempstr=reader.readLine())!=null){
				ArrayList<Tuple> single_path=read_into_tuples(tempstr);
				alldata.add(single_path);
			}

		}catch (IOException e){
			e.printStackTrace();
		}finally{
			if(reader!=null){
				try{
					reader.close();
				}catch (IOException e1){
				}
			}
		}
		return alldata;
	}
	
	//Test OK
	//This is the importance for certain dataset
	static double learning_rate_with_importance(double h, ArrayList<Tuple> x_list, int y, double[] theta,double learning_rate){

		double A=norm_square_sparse(x_list);
		double B=sparse_dot_product(theta, x_list);
		double s=(B-y)/A*(1-Math.exp(-h*learning_rate*A));
		return s;
	}

	//Test Ok!
	public final static double sparse_dot_product(double[] weight, ArrayList<Tuple> tuple){

		double sum=0;
		for(Tuple x:tuple){
			sum+=weight[x.index]*x.value;
		}
		return sum;
	}


	// Test OK!
	public static double norm_square_sparse(ArrayList<Tuple> x_list){

		double sum=0;
		for(Tuple x:x_list){
			sum+=x.value*x.value;
		}
		return sum;
	}

	public final static ArrayList<Tuple> read_into_tuples(String line){
		/*
	String[] line1=line.split("features");
	String[] line2=line1[1].split("const:");
	String valid_line=line2[0].substring(1,line2[0].length());
		 */
		String valid_line=line.substring(12,line.length()-10);
		String[] arr=valid_line.split(" ");
		ArrayList<Tuple> set=new ArrayList<Tuple>();
		for(String single:arr){
			Tuple temp=extract_value(single);
			set.add(temp);
		}
		return set;
	}

	public final static Tuple extract_value(String single){
		String new_str=single.substring(1,single.length());
		String[] arr=new_str.split(":");
		//int index=parseInt(arr[0]);
		int index=parseInt(arr[0]);
		double value=Double.parseDouble(arr[1]);
		return new Tuple(index,value);

	}

	public static int parseInt(String str){
		int sum=0;
		for(int i=0;i<=str.length()-1;i++){
			sum=10*sum+((int)str.charAt(i)-48);
		}
		return sum;
	} 
	// test ok!
	// This is to predict
	public static int predication(double[] weight,ArrayList<Tuple> tuple, double b){
		int response;
		double t=sparse_dot_product(weight, tuple)-b;
		response=(t>=0)?1:-1;
		return response;
	}
	
	
	public static double[] update_theta_logistic_loss(double[] theta,double learning_rate,int y, ArrayList<Tuple> path){
		double term=y*sparse_dot_product(theta, path);
		for(Tuple x:path){
			theta[x.index]+=learning_rate*y*(Math.exp(-term)/(1+Math.exp(-term)))*x.value;
//			System.out.println(theta[x.index]);
		}
		return theta;
	}


}
