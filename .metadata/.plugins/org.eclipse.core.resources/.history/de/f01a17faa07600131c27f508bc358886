package evaluate_reverse_polish_notation;

import java.util.Stack;

public class evaluate_reverse_polish_notation {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Stack<String> stack=new Stack<String>();
		stack.push("2");
		stack.push("3");
		int a = Integer.parseInt(stack.pop());
		int b = Integer.parseInt(stack.pop());
		System.out.println(a+b);
	}
	
	public int evalRPN(String[] tokens) {
        Stack<Integer> stack=new Stack<Integer>();
        for(String s:tokens){
            if(s!="+"||s!="-"||s!="*"||s!="/"){
                stack.push(Integer.parseInt(s));
            }
            else{
                
                if(s.equals("+")){
                int temp=stack.pop()+stack.pop();
                if(stack.size()==0)
                		return temp;
                else
                	stack.push(temp);
                }
                else if(s.equals("-")){
                int temp=stack.pop()-stack.pop();
                if(stack.size()==0)
            		return temp;
                else
            	stack.push(temp);
                }
                else if(s.equals("*")){
                int temp=stack.pop()*stack.pop();
                if(stack.size()==0)
            		return temp;
                else
            	stack.push(temp);
                }
                else if(s.equals("/")){
                int de=stack.pop();
                int num=stack.pop();
                int temp=num/de;
                if(stack.size()==0)
            		return temp;
            else
            	stack.push(temp);
                }
            }
        }
    }
}
