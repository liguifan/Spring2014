package arraylist;

import datastructure.ListNode;

public class reorder_list {

	public static void main(String[] args) {
		ListNode list=new ListNode(0);
		ListNode list_p=list;
		for(int i=1;i<7;i++){
			list.next=new ListNode(i);
			list=list.next;
		}
		list=list_p.next;
		while(list!=null){
			System.out.println(list.val);
			list=list.next;
		}
		list=list_p.next;
		ListNode re=reorderList(list);
		while(re!=null){
			System.out.println(re.val);
			re=re.next;
		}
		
		
	}

	
	public void reorderList(ListNode head) {
        if(head==null)
             return ;
        if(head.next==null)
             return ;
        
        int size=0;
        ListNode tra=new ListNode(0);
        tra.next=head;
        head=tra;
        
        
        
        while(tra!=null){
            size++;
            tra=tra.next;
        }
        
        tra=head;
        ListNode reverse=new ListNode(0);
        reverse.next=reverseList(head.next);
        
        ListNode newlist=new ListNode(0);
        ListNode x=newlist;
        int n=1;
        if(size%2==0){
            while(n<=size/2){
            newlist.next=tra.next;
            newlist=newlist.next;
            tra=tra.next;
            newlist.next=reverse.next;
            reverse=reverse.next;
            newlist=newlist.next;}
        }
        else
        {
             while(n<=size/2+1){
                 newlist.next=tra.next;
                 newlist=newlist.next;
                 tra=tra.next;
                 newlist.next=reverse.next;
                 reverse=reverse.next;
                 newlist=newlist.next;
        }
        }
        head= x.next;
        
    }
    
    public static ListNode reverseList(ListNode head){
		ListNode start=new ListNode(0);
		start.next=head;
		
		ListNode prev=null;
		ListNode curr=head;
		ListNode next=curr.next;
		while(curr!=null){
			next=curr.next;
			curr.next=prev;
			prev=curr;
			curr=next;
		}
		
		return prev;
	}
}
