package perceptron;

public class test {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s1="123";
		long s=System.nanoTime();
//		Integer.parseInt(s1);
		int x=parseInt(s1);
		long e=System.nanoTime();
		
		
		
		String s2="0.3435451524";
		long s2=System.nanoTime();
//		Integer.parseInt(s1);
		double x=parseDouble(s2);
		long e2=System.nanoTime();
	}
	
	
	public static int parseInt( final String s )
	{
	    int num  = 0;
	    final int len  = s.length( );
	    int i = 1;
	    while ( i < len )
	        num = num*10 + '0' - s.charAt( i++ );
	    return num;
	} 
	
	public static double parseDouble(String num) {
        if(num == null || "".equals(num.trim())) {
            throw new NumberFormatException("Number cannot be null/empty.");
        }
         
        // remove any leading or trailing spaces
        num = num.trim();
        final int size = num.length();
         
        // holds the starting position of the digits
        int index = 0;
        boolean isNegative = false;
        boolean hasDecimal = false;
         
        // check for unary operators
        char first = num.charAt(0);
        switch(first) {
            case '+':
                index++;
                break;
                 
            case '-':
                index++;
                isNegative = true;
                break;
                 
            case '.':
                index++;
                hasDecimal = true;
                break;
                 
            default:
                throw new NumberFormatException("Number is malformed: " + num); 
        }
         
        // start the parsing logic
         
        double ip = 0.0, dp = 0.0;
        double fd = 1.0;
         
        for(int i = index; i < size; i++) {
            char c = num.charAt(i);
            int digit = c - '0';
             
            if(isNumeric(c) && digit != '0') {
                if(!hasDecimal) {
                    ip *= 10;
                    ip += digit;
                } else {
                    dp *= 10;
                    dp += digit;
                    fd *= 10;
                }
            } else if(c == '.') {
                if(hasDecimal) {
                    throw new NumberFormatException("Number is malformed: " + num);
                }
                 
                hasDecimal = true;
            } else {
                throw new NumberFormatException("Number is malformed: " + num);
            }
        }
         
        // add the decimal fraction
        dp = dp / fd;
        double number = ip + dp;
         
        // test for negative
        if(isNegative) {
            number = 0 - number;
        }
         
        return number;
    }
	
	public  static boolean isNumeric(char digit) {
        if('0' <= digit && digit <= '9') {
            return true;
        }
         
        return false;
    }

}
