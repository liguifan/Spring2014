package recursion;

import java.util.ArrayList;

public class triangle {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ArrayList<ArrayList<Integer>> triangle=new ArrayList<ArrayList<Integer>>();
		ArrayList<Integer> path1 =new ArrayList<Integer>();
		ArrayList<Integer> path2 =new ArrayList<Integer>();
		ArrayList<Integer> path3 =new ArrayList<Integer>();
		ArrayList<Integer> path4 =new ArrayList<Integer>();
		path1.add(2);
		path2.add(3);
		path2.add(4);
		path3.add(6);
		path3.add(5);
		path3.add(7);
		path4.add(4);
		path4.add(1);
		path4.add(8);
		path4.add(3);
		triangle.add(path1);
		triangle.add(path2);
		triangle.add(path3);
		triangle.add(path4);
		ArrayList<Integer> route =new ArrayList<Integer>();
		int r=find_path(triangle, 0, 0, 0);
		System.out.println(r);
		System.out.println(triangle.get(1).get(0));
	}
	
	
	
	public static void minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
        
    }
	
	
	
	public static int find_path(ArrayList<ArrayList<Integer>> triangle, int col,int row,int sum ){
		if(row==triangle.size()-1){
				return triangle.get(row).get(col);
		}
		int left=find_path(triangle,col,row+1, sum);
		int right=find_path(triangle,col+1,row+1, sum);
		System.out.println("l"+left+"r"+r);
		sum+=Math.min(left, right);
		System.out.println("sum "+sum);
		return sum;
	}

}
