package binary_tree;

import datastructure.ListNode;
import datastructure.TreeNode;

public class flatten_binary_tree_to_linked_list {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		TreeNode root=new TreeNode(5);
		/*
		root.left=new TreeNode(6);
		root.left.left=new TreeNode(19);
		root.left.right=new TreeNode(3);*/
		root.right=new TreeNode(2);
		
		TreeNode result=flatten2(root);
	
		while(result!=null){
			System.out.println(result.val);
			result=result.right;
			
		}
		
		
	}
	public static ListNode flatten(TreeNode root){
		/*if(root.left==null && root.right==null){
			return null;// this doesnt add the leave, unlike the main program ,add everynode when get into the function.
		*/
		
		if(root.left==null && root.right==null){
			
			return new ListNode(root.val);
			//the main program execuate the add to the list function (list.next= return())
		}
		ListNode list=new ListNode(root.val);
		ListNode head=list;
		if(root.left!=null)
			list.next=flatten(root.left);
		
		ListNode p=list;
		
		while(p.next!=null){
			p=p.next;
		}
		if(root.right!=null)
			p.next=flatten(root.right);
		
		return head;
	
  }
	
	public static TreeNode flatten2(TreeNode root){
		if(root.left==null && root.right==null)
				return new TreeNode(root.val);
		
		TreeNode rChild=null;
		if(root.left!=null)
			rChild=flatten2(root.left);
		
			
		TreeNode p=rChild;
		while(!(p.left==null && p.right==null)){
			//System.out.println("debug "+p.val);
			p=p.right;
			
		}
		//if left == null
		//System.out.println("debug "+p.val);
		if(root.right!=null){
			p.right=flatten2(root.right);
			//System.out.println("p right "+p.right.val);
		}
		
		else
			root.right=flatten2(root.right)
		root.right=rChild;
		root.left=null;
		return root;
		}
	}


