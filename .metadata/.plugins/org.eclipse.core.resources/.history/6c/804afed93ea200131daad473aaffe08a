package Adaboosting;

import java.util.ArrayList;

import datastructure.Tuple;

public class adaboosting {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ArrayList<Tuple> x_list=new ArrayList<Tuple>();
		for(int i=0;i<=3-1;i++){
			x_list.add(new Tuple(i+2,i+1));
			
		}
		
		double[] theta={1,2,3,4,5,6,7,8};
		
		double re=learning_rate_with_importance(3,x_list,1,theta,0.5);
		
		System.out.println("the result is: "+re);
		
	}
	
static double learning_rate_with_importance(double h, ArrayList<Tuple> x_list, int y, double[] theta,double learning_rate){
	
	double A=norm_square_sparse(x_list);
	System.out.println("norm x is : "+A);
	double B=sparse_dot_product(theta, x_list);
	System.out.println("sparse dot product is : "+B);
	double s=(B-y)/A*(1-(1-Math.exp(-h*learning_rate*A)));
	
	return s;
}
	

public final static double sparse_dot_product(double[] weight, ArrayList<Tuple> tuple){
	
	double sum=0;
	for(Tuple x:tuple){
		sum+=weight[x.index]*x.value;
	}
	return sum;
}


// Test OK!
public static double norm_square_sparse(ArrayList<Tuple> x_list){
	
	double sum=0;
	for(Tuple x:x_list){
		sum+=x.value*x.value;
	}
	return sum;
}



}
