package Stochastic_gradient_decent;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import datastructure.Tuple;

public class gradient_decent {
	final static int MAX=100;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		double diff=0;
		double[] theta=new double[50000];
		try{
			reader=new BufferedReader(new FileReader(file));
			String tempstr=null;
		
			while((tempstr=reader.readLine())!=null){
				
				//double bias_term=extrac_bias_term(tempstr);
				ArrayList<Tuple> path=read_into_tuples(tempstr);
				int y_original=(int) tempstr.charAt(0)-48;
				
				diff= h_theta(theta, x)-y;
				theta[i]+=theta[i]-alpha*diff*x[i];
				
			}
			reader.close();
		}
		catch (IOException e){
			e.printStackTrace();
		}finally{
			if(reader!=null){
				try{
					reader.close();
				}catch (IOException e1){
				}
			}
		}
	}

	
	
	public static double[] gradient_find(double[] theta){
		double alpha=0;
		double diff=0;
		
		for(int i=0;i<=MAX-1;i++){
			
		}
		
		//x[i] is the ith iteration and x[i] is a vector.
	}
	
	
	public static double h_theta(double[] theta, ArrayList<Tuple> X){
		double sum=0;
		for(Tuple x:X){
			sum+=theta[x.index]*x.value;
		}
		
		return sum;
	}
}
