package others;

import java.util.ArrayList;
import java.util.HashSet;

public class parlindrome_partitioning {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ArrayList<ArrayList<String>> res = new ArrayList<ArrayList<String>>();
        ArrayList<String> list = new ArrayList<String>();
		String str="aab";
		partitionHelper(0, str, list, res);
		for(ArrayList<String> x:res){
			System.out.println(x);
		}
		

	}
	
	public static ArrayList<ArrayList<String>> partition(String str){
		ArrayList<ArrayList<String>> set=new ArrayList<ArrayList<String>>();
		int len=str.length();
		HashSet<String> hashset = new HashSet<String>();
		for(int i=0;i<=len-1;i++){
			int left=i;
			int right=i+1;
			ArrayList<String> path=new ArrayList<String>();
			while(left>=0 && right<=len-1){
				if(str.charAt(left)==str.charAt(right)){
					System.out.println("test");
					String s=str.substring(left,right+1);
					if(hashset.add(s)){
						path.add(s);
					}
					System.out.println("path is "+path);
					left--;
					right++;
				}else{
					
					break;
				}
			}
			set.add(path);
			System.out.println("mmmmmm");
			
		}
		
		return set;
}
	
	public static void partitionHelper(int start, String s, ArrayList<String> list, ArrayList<ArrayList<String>> res) {
        if(start == s.length()) {
            res.add(new ArrayList<String>(list));
            return;
        }
        
        for(int i = start + 1; i <= s.length(); i++) {
            String sub = s.substring(start, i);
            if(isParlidrome(sub)) {
                // add it to the list
                list.add(sub);
                partitionHelper(i, s, list, res);
                list.remove(list.size() - 1);
            }
        }
    }
    
    public static boolean isParlidrome(String s) {
        int left = 0, right = s.length() - 1;
        while(right >= left) {
            if(s.charAt(right) != s.charAt(left)) {
                return false;
            }
            right--;
            left++;
        }
        return true;
    }
}
